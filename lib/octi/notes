8/11
/home/ubuntu/workspace/lib/octi/move.rb:151:in `block in execute_move': undefined method `prong_count' for nil:NilClass (NoMethodError)        from /home/ubuntu/workspace/lib/octi/move.rb:149:in `each'
        from /home/ubuntu/workspace/lib/octi/move.rb:149:in `execute_move'        from /home/ubuntu/workspace/lib/octi/game.rb:47:in `block in bestmove'
        from /home/ubuntu/workspace/lib/octi/game.rb:45:in `each'        from /home/ubuntu/workspace/lib/octi/game.rb:45:in `bestmove'
        from /home/ubuntu/workspace/lib/octi/game.rb:74:in `turn'
        from /home/ubuntu/workspace/lib/octi/game.rb:22:in `run'
        from /home/ubuntu/workspace/lib/octi/game.rb:29:in `run'
        from /home/ubuntu/workspace/lib/octi/game.rb:29:in `run'
        from /home/ubuntu/workspace/lib/octi/game.rb:29:in `run'
        from /home/ubuntu/workspace/lib/octi/game.rb:29:in `run'
        from /home/ubuntu/workspace/lib/octi/game.rb:29:in `run'
        from /home/ubuntu/workspace/lib/octi/game.rb:29:in `run'
        from /home/ubuntu/workspace/lib/octi/game.rb:29:in `run'
        from /home/ubuntu/workspace/lib/octi/game.rb:29:in `run'
        from /home/ubuntu/workspace/lib/octi/game.rb:29:in `run'
        from /home/ubuntu/workspace/lib/octi/game.rb:29:in `run'
        from /home/ubuntu/workspace/lib/octi/game.rb:29:in `run'        from /home/ubuntu/workspace/lib/octi/game.rb:29:in `run'
        from /home/ubuntu/workspace/lib/octi/game.rb:29:in `run'
        from /home/ubuntu/workspace/lib/octi/game.rb:29:in `run'        from /home/ubuntu/workspace/lib/octi/game.rb:29:in `run'
        from /home/ubuntu/workspace/lib/octi/game.rb:29:in `run'
        from /home/ubuntu/workspace/lib/octi/game.rb:29:in `run'        from /home/ubuntu/workspace/lib/octi/game.rb:15:in `initialize'
        from octi.rb:14:in `new'
        from octi.rb:14:in `<main>'
        
        
        
        
        



module Octi
	class GameTree

		attr_accessor :comp

		def generate
			initial_game_state = GameState.new(comp, @board = Board.new(6,7))
			generate_moves(initial_game_state)
			initial_game_state
		end

		def generate_moves(game_state)
			next_player = (game_state.current_player == comp ? human : comp)
			game_state.board.each_index do |x|
				x.each_with_index do |game_state.current_player, position|
				unless player_at_position #base case placeholder
					if game_state.board[x][position] == nil # is this necessary? / destination
						@board.each do |col|	#find a pod to move to destination
							col.each do |cell|
								if cell.is_a?(Pod)
									pod = cell
									if pod.player == comp
										#can pod move in that direction 
										if pod.can_move?(@board,x,position, col,cell)
											next_board = game_state.board.dup
											next_board[col][cell] = nil
											next_board[x][position] = pod
											next_board = game_state.board.dup
											next_game_state = (GameState.cache.states[next_baord] 
												||= GameState.new(next_player, next_board)))
											game_state.moves << next_game_state
											generate_moves(next_game_state)										
										end
									else
										pod.prongs.each do |prong|
											if !prong 
												prong = true
												next_board = game_state.board.dup
												next_board[x][position] = #game_state.current
												next_board = game_state.board.dup
												next_game_state = (GameState.cache.states[next_baord] 
													||= GameState.new(next_player, next_board)))
												game_state.moves << next_game_state
												generate_moves(next_game_state)	
											end	
										end						
									end
								end
							end
						end
					end
					next_board = game_state.board.dup
					next_game_state = (GameState.cache.states[next_baord] 
						||= GameState.new(next_player, next_board)))
					game_state.moves << next_game_state
					generate_moves(next_game_state)
				end
			end
		end
	end
end